openapi: 3.0.0
info:
  title: Signs Lang PE
  description: "Tecnologías utilizadas: Node.js, TypeScript, Express, PostgreSQL, Prisma, JWT, Swagger, Cloudinary. Desarrollado por: Valeria Lozano."
  version: 1.0.0

servers:
  - url: http://localhost:9090/api
    description: Servidor de desarrollo
  - url: https://signs-lang-pe.up.railway.app/api
    description: Servidor de producción

tags:
  - name: Users
    description: Operaciones relacionadas con los usuarios
  - name: Labels
    description: Operaciones relacionadas con las etiquetas
  - name: Contents
    description: Operaciones relacionadas con los contenidos
  - name: Categories
    description: Operaciones relacionadas con las categorías

paths:
  # USERS
  /users:
    get:
      tags:
        - Users
      summary: Obtener todos los usuarios
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - Users
      summary: Crear un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/userCreate"
      responses:
        "201":
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{id}:
    get:
      tags:
        - Users
      summary: Obtener un usuario por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID del usuario
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      tags:
        - Users
      summary: Actualizar un usuario por ID
      description: Requiere autenticación
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID del usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/userUpdate"
      responses:
        "200":
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      tags:
        - Users
      summary: Eliminar un usuario por ID
      description: Requiere autenticación
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID del usuario
      responses:
        "204":
          description: Usuario eliminado
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/email/{email}:
    get:
      tags:
        - Users
      summary: Obtener un usuario por correo electrónico
      parameters:
        - in: path
          name: email
          required: true
          schema:
            $ref: "#/components/bases/email"
          description: Correo electrónico del usuario
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/login:
    post:
      tags:
        - Users
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/userLogin"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/responses/userLogin"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # CATEGORIES
  /categories:
    get:
      tags:
        - Categories
      summary: Obtener todas las categorías
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/category"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - Categories
      summary: Crear una nueva categoría
      description: Requiere autenticación
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/createCategory"
      responses:
        "201":
          description: Categoría creada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Obtener una categoría por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID de la categoría
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    patch:
      tags:
        - Categories
      summary: Actualizar una categoría por ID
      description: Requiere autenticación
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID de la categoría
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/updateCategory"
      responses:
        "200":
          description: Categoría actualizada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      tags:
        - Categories
      summary: Eliminar una categoría por ID
      description: Requiere autenticación
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID de la categoría
      responses:
        "204":
          description: Categoría eliminada
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /categories/name/{name}:
    get:
      tags:
        - Categories
      summary: Obtener una categoría por nombre
      parameters:
        - in: path
          name: name
          required: true
          schema:
            $ref: "#/components/bases/name"
          description: Nombre de la categoría
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/category"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # LABELS
  /labels:
    get:
      tags:
        - Labels
      summary: Obtener todas las etiquetas
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/label"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - Labels
      summary: Crear una nueva etiqueta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/label"
      responses:
        "201":
          description: Etiqueta creada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/label"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /labels/{id}:
    get:
      tags:
        - Labels
      summary: Obtener una etiqueta por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID de la etiqueta
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/label"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    patch:
      tags:
        - Labels
      summary: Actualizar una etiqueta por ID
      description: Requiere autenticación
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID de la etiqueta
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/label"
      responses:
        "200":
          description: Etiqueta actualizada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/label"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      tags:
        - Labels
      summary: Eliminar una etiqueta por ID
      description: Requiere autenticación
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID de la etiqueta
      responses:
        "204":
          description: Etiqueta eliminada
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /labels/name/{name}:
    get:
      tags:
        - Labels
      summary: Obtener una etiqueta por nombre
      parameters:
        - in: path
          name: name
          required: true
          schema:
            $ref: "#/components/bases/name"
          description: Nombre de la etiqueta
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/label"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /labels/{id}/verify:
    patch:
      tags:
        - Labels
      summary: Verificar una etiqueta por ID
      description: Requiere autenticación
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID de la etiqueta
      responses:
        "200":
          description: Etiqueta verificada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/label"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # CONTENTS
  /contents:
    get:
      tags:
        - Contents
      summary: Obtener todos los contenidos
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/content"
        "201":
          description: Contenido creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/content"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - Contents
      summary: Crear un nuevo contenido
      description: Requiere autenticación
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/requestBodies/content"
      responses:
        "201":
          description: Contenido creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/content"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /contents/{id}:
    get:
      tags:
        - Contents
      summary: Obtener un contenido por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID del contenido
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/content"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      tags:
        - Contents
      summary: Eliminar un contenido por ID
      description: Requiere autenticación
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID del contenido
      responses:
        "204":
          description: Contenido eliminado
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /contents/label/{labelId}:
    get:
      tags:
        - Contents
      summary: Obtener todos los contenidos por ID de etiqueta
      parameters:
        - in: path
          name: labelId
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID de la etiqueta
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/content"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /contents/contributor/{contributorId}:
    get:
      tags:
        - Contents
      summary: Obtener todos los contenidos por ID de contribuidor
      parameters:
        - in: path
          name: contributorId
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID del contribuidor
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/content"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /contents/{id}/verify:
    patch:
      tags:
        - Contents
      summary: Verificar un contenido por ID
      description: Requiere autenticación
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: "#/components/bases/id"
          description: ID del contenido
      responses:
        "200":
          description: Contenido verificado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/content"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Token JWT para autenticación. Los usuarios autenticados pueden tener uno de los siguientes roles: "admin", "user".'

  # RESPONSES
  responses:
    # GENERAL
    BadRequest:
      description: Datos no válidos. La solicitud no se puede procesar debido a errores de cliente.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Datos no válidos. Asegúrate de que todos los campos requeridos estén presentes y sean correctos."
              validationErrors:
                type: array
                items:
                  type: string
                example:
                  [
                    "El campo 'nombre' es requerido.",
                    "La dirección de correo electrónico no es válida.",
                    "Ya existe un usuario con el correo electrónico",
                  ]

    Unauthorized:
      description: No autenticado. Se requiere un token válido.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No autenticado. Se requiere un token válido."

    Forbidden:
      description: No tienes permisos para acceder a este recurso.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Acceso prohibido. No tienes los permisos necesarios."

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No se encontró el recurso solicitado"

    InternalServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Error interno del servidor"

    # AUTH
    userLogin:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/user"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjIwZjQwZjIwZjIwZjIwZjIwZjIwZjIiLCJyb2xlIjoidXNlciIsImlhdCI6MTYzMDIwNjQwMCwiZXhwIjoxNjMwMjA2NDAwfQ.7"

    # USERS
    user:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/user"

    # LABELS
    label:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/label"

    # CONTENTS
    content:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/content"

    # CATEGORIES
    category:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/category"

  # BASES
  bases:
    id:
      type: string
      example: "jndasl97jnias7280004872nk"
      description: Identificador único del recurso

    fullName:
      type: string
      example: "John Doe"
      description: Nombre completo del usuario

    username:
      type: string
      example: "john.doe"
      description: Nombre de usuario, debe tener al menos 3 caracteres

    email:
      type: string
      example: "john.doe@example.com"
      description: Correo electrónico del usuario, debe cumplir con el formato de un correo electrónico válido

    password:
      type: string
      example: "Abcd1234_"
      description: Contraseña del usuario, debe tener al menos 8 caracteres, una letra mayúscula, una letra minúscula, un número y un carácter especial

    passwordHash:
      type: string
      example: "$2b$10$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36FjsdY4Z5k6Q5J5Z5J5J5K"
      description: Contraseña del usuario encriptada

    image:
      type: string
      format: binary
      description: Imagen a subir.

    name:
      type: string
      example: "Juguetes"
      description: Nombre del producto, categoría, marca o material

    description:
      type: string
      example: "Juguetes para niños"
      description: Descripción del producto, categoría, marca, material o descuento

    date:
      type: string
      format: date-time
      example: "2021-09-01T00:00:00.000Z"
      description: Fecha y hora en formato ISO 8601

  # REQUEST BODIES
  requestBodies:
    # AUTH
    userLogin:
      type: object
      properties:
        email:
          $ref: "#/components/bases/email"
        password:
          $ref: "#/components/bases/password"

    # USERS
    userCreate:
      type: object
      required:
        - username
        - fullName
        - email
        - password
      properties:
        username:
          $ref: "#/components/bases/username"
        fullName:
          $ref: "#/components/bases/fullName"
        email:
          $ref: "#/components/bases/email"
        password:
          $ref: "#/components/bases/password"
        isDeafMute:
          type: boolean
          example: false
          description: Indica si el usuario es sordo-mudo
        role:
          type: string
          example: "user"
          description: Rol del usuario, puede ser "admin", "moderator" o "user"

    userUpdate:
      type: object
      required:
        - username
        - fullName
      properties:
        username:
          $ref: "#/components/bases/username"
        fullName:
          $ref: "#/components/bases/fullName"
        isDeafMute:
          type: boolean
          example: false
          description: Indica si el usuario es sordo-mudo
        role:
          type: string
          example: "user"
          description: Rol del usuario, puede ser "admin", "moderator" o "user"

    # LABELS
    label:
      type: object
      required:
        - name
      properties:
        name:
          $ref: "#/components/bases/name"

    # CONTENTS
    content:
      type: object
      required:
        - contributorId
        - file
      properties:
        labelId:
          $ref: "#/components/bases/id"
        contributorId:
          $ref: "#/components/bases/id"
        labelName:
          type: string
          example: "Juguetes"
          description: Nombre de la etiqueta
        file:
          $ref: "#/components/bases/image"

    # CATEGORIES
    createCategory:
      type: object
      required:
        - name
        - description
      properties:
        name:
          $ref: "#/components/bases/name"
        description:
          $ref: "#/components/bases/description"
        icon:
          type: string
          example: "https://www.example.com/icon.svg"

    # CATEGORIES
    updateCategory:
      type: object
      properties:
        name:
          $ref: "#/components/bases/name"
        description:
          $ref: "#/components/bases/description"
        icon:
          type: string
          example: "https://www.example.com/icon.svg"

  # SCHEMAS
  schemas:
    # USERS
    user:
      type: object
      properties:
        _id:
          $ref: "#/components/bases/id"
        username:
          $ref: "#/components/bases/username"
        fullName:
          $ref: "#/components/bases/fullName"
        email:
          $ref: "#/components/bases/email"
        password:
          $ref: "#/components/bases/password"
        isDeafMute:
          type: boolean
          example: false
          description: Indica si el usuario es sordo-mudo
        role:
          type: string
          example: "user"
          description: Rol del usuario, puede ser "admin", "moderator" o "user"
        createdAt:
          $ref: "#/components/bases/date"

    # LABELS
    label:
      type: object
      properties:
        _id:
          $ref: "#/components/bases/id"
        name:
          $ref: "#/components/bases/name"
        category:
          type: object
          example:
            _id: "jndasl97jnias7280004872nk"
            name: "Personas"
          description: Categoría de la etiqueta
        reliability:
          type: number
          example: 0.8
          description: Fiabilidad de la etiqueta, debe ser un número entre 0 y 1
        verified:
          type: boolean
          example: true
          description: Indica si la etiqueta ha sido verificada
        createdAt:
          $ref: "#/components/bases/date"

    # CONTENTS
    content:
      type: object
      properties:
        _id:
          $ref: "#/components/bases/id"
        url:
          type: string
          example: "https://www.example.com/image.jpg"
          description: URL de la imagen
        verified:
          type: boolean
          example: true
          description: Indica si la etiqueta ha sido verificada
        contributor:
          type: object
          example:
            _id: "jndasl97jnias7280004872nk"
            username: "john.doe"
        createdAt:
          $ref: "#/components/bases/date"

    # CATEGORIES
    category:
      type: object
      properties:
        _id:
          $ref: "#/components/bases/id"
        name:
          $ref: "#/components/bases/name"
        description:
          type: string
          example: "Palabras especificas"
          description: Descripción de la categoría
        icon:
          type: string
          example: "https://www.example.com/icon.svg"
          description: URL del icono de la categoría
        createdAt:
          $ref: "#/components/bases/date"
